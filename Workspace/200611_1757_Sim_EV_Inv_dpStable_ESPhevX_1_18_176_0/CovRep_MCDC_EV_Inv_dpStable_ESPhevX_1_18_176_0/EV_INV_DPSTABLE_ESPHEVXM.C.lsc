--------------------------------------------------------------------------------

	Rational(R) Test RealTime Coverage - Listing
	Tool version:             7.5.0.6.206.011

	File: EV_INV_DPSTABLE_ESPHEVXM.C (C:\TSDCT\ETAS\ASCET\V6_1_4\CGEN\)

	Source time:        Thu Jun 11 17:57:07 2020
	Listing time:       Thu Jun 11 17:58:57 2020
	(Preprocessing Flags:/nologo /errorReport:queue /Od /I C:\tsdct\ETAS\ASCET\V6_1_4\target\legacy\psl /I C:\tsdct\ETAS\ASCET\V6_1_4\target\legacy /I C:\tsdct\ETAS\ASCET\V6_1_4\target\common /I C:\tsdct\ETAS\ASCET\V6_1_4\target /I C:\tsdct\ETAS\ASCET\V6_1_4\target\psl /D STRICT /D SIM_PC /D WIN32 /D _DEBUG /D _WINDOWS /D _USRDLL /D VISUALSTDPRJ_EXPORTS /D _WINDLL /D _UNICODE /D UNICODE /Gm /EHsc /RTC1 /MTd /W3 /ZI /TC )

--------------------------------------------------------------------------------
(Following annotated lines were not hit ==>, or partially hit -->)
    1    |
    2    |/******************************************************************************
    3    | * BEGIN: Banner
    4    | *-----------------------------------------------------------------------------
    5    | *    Please do not edit! This file was automatically generated by ASCET.
    6    | *-----------------------------------------------------------------------------
    7    | *                                 ETAS GmbH
    8    | *                      D-70469 Stuttgart, Borsigstr. 14
    9    | *-----------------------------------------------------------------------------
   10    | * File:.....................EV_Inv_dpStable_ESPhevXM.c
   11    | * Description:.............."EV_Inv_dpStable_ESPhevX>>Impl (module code)"
   12    | * Creation Date:............6/11/2020
   13    | * Creation Time:............5:29:25 PM
   14    | *-----------------------------------------------------------------------------
   15    | * ASCET User:...............nbg7hc
   16    | * ASCET Version:............V6.1.4_CS_SR28
   17    | * ASCET-MD Version:.........V6.1.4
   18    | * ASCET-RP Version:.........V6.1.4
   19    | * ASCET-SE Version:.........V6.1.4 CID[610]
   20    | *-----------------------------------------------------------------------------
   21    | * END: Banner
   22    | ******************************************************************************/
   23    |
   24    |
   25    |/*-----------------------------------------------------------------------------
   26    | *    Include files
   27    | *----------------------------------------------------------------------------*/
   28    |
   29    |#include "globalH.h"
   30    |#include "_02_ConstantHevXM.h"
   31    |#include "_03_SetupABSM.h"
   32    |#include "_03_SetupHevXM.h"
   33    |#include "_Public_ConstantM.h"
   34    |#include "_02_ConstantHevXI.h"
   35    |#include "_03_SetupABSI.h"
   36    |#include "_03_SetupHevXI.h"
   37    |#include "_Public_ConstantI.h"
   38    |#include "EV_Inv_dpStable_ESPhevXM.h"
   39    |
   40    |
   41    |/******************************************************************************
   42    | * BEGIN: Generation Information
   43    | *-----------------------------------------------------------------------------
   44    | * Component:................Class
   45    | * Name:....................."EV_Inv_dpStable_ESPhevX"
   46    | * Implementation:..........."Impl"
   47    | * Dataset:.................."FA"
   48    | * Specification:............ESDL
   49    | * Version:.................."Version 1.18.176.0"
   50    | * Library Path:............."RNM_CMP_Database\PlatformLibrary\Package\Hydraulics\Private\Classes\_03_Components\_02_EV\EV_Inv_Control"
   51    | *-----------------------------------------------------------------------------
   52    | * Project Name:............."CoverageTestProject"
   53    | * Project Library Path:....."RNM_CMP_Database\_Temp_CoverageTestPrj\"
   54    | *-----------------------------------------------------------------------------
   55    | * Generation Date:..........6/11/2020
   56    | * Generation Time:..........17:29:23
   57    | *-----------------------------------------------------------------------------
   58    | * ASCET Version:............V6.1.4_CS_SR28
   59    | * ASCET-MD Version:.........V6.1.4
   60    | * ASCET-RP Version:.........V6.1.4
   61    | * ASCET-SE Version:.........V6.1.4 CID[610]
   62    | *-----------------------------------------------------------------------------
   63    | * END: Generation Information
   64    | ******************************************************************************/
   65    |
   66    |
   67    |/******************************************************************************
   68    | * BEGIN: Project Options "Build"/"Code"
   69    | *-----------------------------------------------------------------------------
   70    | *    Build
   71    | *-----------------------------------------------------------------------------
   72    | * Code Generator:...........Implementation Experiment
   73    | * Target:...................PC Simulation Library
   74    | *-----------------------------------------------------------------------------
   75    | *    Code
   76    | *-----------------------------------------------------------------------------
   77    | * Add Comment with Generation Information for each Component [true]: true
   78    | * Add Comment with Implementation Information for each Assignment Statement [true]: true
   79    | * Add Comment with Specification Source for each Statement [true]:..true
   80    | * Add parenthesis for readability [false]:..........................false
   81    | * Casting [MISRA]:..................................................Legacy
   82    | * Force Parenthesis for Binary Logical Operators [false]:...........false
   83    | * Generate Define Directives for Enum Values [false]:...............false
   84    | * Prefix for Component Names [<empty String>]:......................<empty String>
   85    | * Protected against division by zero [true]:........................true
   86    | * Protected Division against Signed Overflow [true]:................true
   87    | * Protected Vector Indices [true]:..................................true
   88    | *-----------------------------------------------------------------------------
   89    | *    Code.Compiler
   90    | *-----------------------------------------------------------------------------
   91    | * Division truncation direction [Zero (T-division)]:................Zero (T-division)
   92    | * Inline directive [__inline]:......................................__inline
   93    | * Integer Bit Size [32]:............................................32
   94    | * Private directive [static]:.......................................static
   95    | * Public directive [<empty String>]:................................<empty String>
   96    | *-----------------------------------------------------------------------------
   97    | *    Code.Experiment
   98    | *-----------------------------------------------------------------------------
   99    | * Activate Coverage Analysis [false]:...............................false
  100    | * Activate Measurement of Stack Variables and Operator Results [false]: false
  101    | * Activate Value Range Analysis [false]:............................false
  102    | * Add Comment with Specification Info for each Element [true]:......true
  103    | * Cache Locking [true]:.............................................false
  104    | * Coverage Counting Mode [boolean mode]:............................boolean mode
  105    | * Enable logging of all data changes [false]:.......................false
  106    | * Max Number of Loop Iterations [1000]:.............................0
  107    | * Message Usage Variant [NON_OPT_COPY_FUNCTION]:....................NON_OPT_COPY_FUNCTION
  108    | * Use OID for Generation of Component Names [true]:.................true
  109    | *-----------------------------------------------------------------------------
  110    | *    Code.FixedPoint
  111    | *-----------------------------------------------------------------------------
  112    | * Allow Double bit Size for Division Numerators [true]:.............true
  113    | * Allow Limit Service for Assignment Limitation [true]:.............false
  114    | * Arithmetic Service Set [<None>]:..................................<None>
  115    | * Generate Limiters (may be changed locally) [true]:................true
  116    | * Generate Round Operation on float to integer Assignment [true]:...true
  117    | * Maximum bit Length (float) [64]:..................................64
  118    | * Maximum bit Length (int) [32]:....................................32
  119    | * Result on Division by Zero [numerator]:...........................numerator
  120    | * Temp Vars always 32 bit (integer) [false]:........................true
  121    | * Use power of 2 approximations of literals [false]:................false
  122    | * Use SHIFT Operation on Signed Values instead of DIV Operation [true]: false
  123    | * Use SHIFT Operation on Signed Values instead of MUL Operation [true]: false
  124    | *-----------------------------------------------------------------------------
  125    | *    Code.Optimizations
  126    | *-----------------------------------------------------------------------------
  127    | * Auto-inline private methods (Smaller code-size - may be changed locally) [false]: false
  128    | * Generate well-formed switch [false]:..............................false
  129    | * Hierarchical Code-Generation (may be changed locally) [false]:....false
  130    | * Initialise history variable with zero [false]:....................false
  131    | * Optimize Direct Access Methods (Multiple Levels) [false]:.........false
  132    | * Optimize Direct Access Methods (One Level) [false]:...............false
  133    | * Optimize Static Actions (Restricted Modelling) [false]:...........false
  134    | * Outline Generated Methods (may be changed locally) [false]:.......true
  135    | *-----------------------------------------------------------------------------
  136    | *    Station.Build
  137    | *-----------------------------------------------------------------------------
  138    | * Use Customized Data Type Names [false]:...........................false
  139    | *-----------------------------------------------------------------------------
  140    | * END: Project Options "Build"/"Code"
  141    | ******************************************************************************/
  142    |
  143    |
  144    |/******************************************************************************
  145    | * BEGIN: Local symbolic constants and function declarations
  146    | *----------------------------------------------------------------------------*/
  147    |
  148    |/*-----------------------------------------------------------------------------
  149    | *    Defines
  150    | *----------------------------------------------------------------------------*/
  151    |
  152    |#define _ASCET_INTERPOLATE_ROUNDED INTERPOLATE_ROUNDED
  153    |#define _ASCET_INTERPOLATE_LINEAR INTERPOLATE_LINEAR
  154    |
  155    |
  156    |/*-----------------------------------------------------------------------------
  157    | * END: Local symbolic constants and function declarations
  158    | ******************************************************************************/
  159    |
  160    |
  161    |/******************************************************************************
  162    | * BEGIN: Function definitions - Algorithms
  163    | *----------------------------------------------------------------------------*/
  164    |
  165    |/* public calc (ModeChangeFlag::log;dp_in::cont;qTgt::cont;dp_K1::cont;EV_OpMode_k1::udisc;B_Closepulse::log) */
  166    |void _040QM00600001NG71CCFSCAPBCTT0_calc(struct _040QM00600001NG71CCFSCAPBCTT0_Obj *self, 
  167    |   uint8 ModeChangeFlag, 
  168    |   sint16 dp_in, 
  169    |   uint16 qTgt, 
  170    |   sint16 dp_K1, 
  171    |   uint8 EV_OpMode_k1, 
  172    |   uint8 B_Closepulse)
  173    |{ 
  174    |   sint32 _t1sint32;
  175    |   /* calc: line #10 */
  176    |   if (ModeChangeFlag)
  177    |   { 
  178    |      /* calc: line #11 */
  179    |      /* assignment to dpStep: min=0, max=1600, hex=32phys+0, limit=(maxBitLength: true, assign: true), zero incl.=true */
  180    |      self->dpStep->val = self->dpStep_Fast->val;
  181    |   }
  182    |   /* calc: line #13 */
  183    |   if (EV_OpMode_k1 == (uint8)0 &&
  184    |      dp_in <= (sint16)self->pTiny->val)
  185    |   { 
  186    |      /* calc: line #16 */
  187    |      /* assignment to EV_OpMode: min=0, max=255, hex=1phys+0, limit=(maxBitLength: false, assign: false), zero incl.=true */
  188    |      self->EV_OpMode->val = (uint8)0;
  189    |      /* calc: line #17 */
  190    |      /* assignment to dp_tgt: min=-12800, max=12800, hex=32phys+0, limit=(maxBitLength: true, assign: true), zero incl.=true */
  191    |      self->dp_tgt->val = (sint16)0;
  192    |      /* calc: line #18 */
  193    |      /* assignment to qTgtOut: min=0, max=12800, hex=128phys+0, limit=(maxBitLength: true, assign: true), zero incl.=true */
  194    |      self->qTgtOut->val = (uint16)0;
  195    |      /* calc: line #19 */
  196    |      self->EV_isClose->val = (uint8)false;
  197    |   }
  198    |   else 
  199    |   { 
  200    |      /* calc: line #23 */
  201    |      if (ModeChangeFlag)
  202    |      { 
  203    |         /* calc: line #26 */
  204    |         self->dp_zero->val = (uint8)false;
  205    |         /* calc: line #28 */
  206    |         self->Closepulse->val = B_Closepulse;
  207    |      }
  208    |      else 
  209    |      { 
  210    |         /* calc: line #40 */
  211    |         self->Closepulse->val = (uint8)false;
  212    |      }
  213    |      /* calc: line #45 */
  214    |      if (dp_in > self->dpThres->val)
  215    |      { 
  216    |         /* calc: line #46 */
  217    |         /* assignment to dpStep: min=0, max=1600, hex=32phys+0, limit=(maxBitLength: true, assign: true), zero incl.=true */
  218    |         self->dpStep->val = self->dpStep_Slow->val;
  219    |      }
  220    |      /* calc: line #49 */
  221    |      /* assignment to dp_tgt: min=-12800, max=12800, hex=32phys+0, limit=(maxBitLength: true, assign: true), zero incl.=true */
  222    |      self->dp_tgt->val = dp_in;
  223    |      /* calc: line #50 */
  224    |      /* assignment to qTgtOut: min=0, max=12800, hex=128phys+0, limit=(maxBitLength: true, assign: true), zero incl.=true */
  225    |      self->qTgtOut->val = qTgt;
  226    |      /* calc: line #53 */
  227    |      if (dp_in <= (sint16)self->pTiny->val)
  228    |      { 
  229    |         /* calc: line #55 */
  230    |         self->dp_zero->val = (uint8)true;
  231    |      }
  232    |      else 
  233    |      { 
  234    |         /* calc: line #57 */
  235    |         if (dp_in > self->dpPressurePulsation->val)
  236    |         { 
  237    |            /* calc: line #59 */
  238    |            self->dp_zero->val = (uint8)false;
  239    |         }
  240    |      }
  241    |      /* calc: line #64 */
  242    |      if (self->dp_zero->val)
  243    |      { 
  244    |         /* calc: line #68 */
  245    |         /* assignment to dp_tgt_K1: min=-12800, max=12800, hex=32phys+0, limit=(maxBitLength: true, assign: true), zero incl.=true */
  246    |         self->dp_tgt_K1->val = (dp_K1 <= (sint16)0) ? dp_K1 : (sint16)0;
  247    |         /* calc: line #71 */
  248    |         _t1sint32 = self->dp_tgt_K1->val - self->dpStep->val;
  249    |         /* assignment to dp_tgt: min=-12800, max=12800, hex=32phys+0, limit=(maxBitLength: true, assign: true), zero incl.=true */
  250    |         self->dp_tgt->val = (_t1sint32 >= self->dp_CurrentZero->val) ? _t1sint32 : self->dp_CurrentZero->val;
  251    |      }
  252    |      /* calc: line #74 */
  253    |      if (self->Closepulse->val)
  254    |      { 
  255    |         /* calc: line #77 */
  256    |         /* assignment to EV_OpMode: min=0, max=255, hex=1phys+0, limit=(maxBitLength: false, assign: false), zero incl.=true */
  257    |         self->EV_OpMode->val = (uint8)2;
  258    |      }
  259    |      else 
  260    |      { 
  261    |         /* calc: line #79 */
  262    |         if (self->dp_tgt->val > self->dp_CurrentZero->val)
  263    |         { 
  264    |            /* assignment to EV_OpMode: min=0, max=255, hex=1phys+0, limit=(maxBitLength: false, assign: false), zero incl.=true */
  265    |            self->EV_OpMode->val = (uint8)1;
  266    |         }
  267    |         else 
  268    |         { 
  269    |            /* calc: line #80 */
  270    |            /* assignment to EV_OpMode: min=0, max=255, hex=1phys+0, limit=(maxBitLength: false, assign: false), zero incl.=true */
  271    |            self->EV_OpMode->val = (uint8)0;
  272    |         }
  273    |      }
  274    |      /* calc: line #82 */
  275    |      self->EV_isClose->val = (uint8)!self->dp_zero->val;
  276    |   }
  277    |}
  278    |sint16 _040QM00600001NG71CCFSCAPBCTT0_getdp_tgt(struct _040QM00600001NG71CCFSCAPBCTT0_Obj *self)
  279    |{ 
  280    |   /* return with expr from getdp_tgt: min=-12800, max=12800, hex=32phys+0, limit=(maxBitLength: true, assign: true), zero incl.=true */
  281    |   return (self->dp_tgt->val);
  282    |}
  283    |uint8 _040QM00600001NG71CCFSCAPBCTT0_getEV_OpMode(struct _040QM00600001NG71CCFSCAPBCTT0_Obj *self)
  284    |{ 
  285    |   /* return with expr from getEV_OpMode: min=0, max=255, hex=1phys+0, limit=(maxBitLength: false, assign: false), zero incl.=true */
  286    |   return (self->EV_OpMode->val);
  287    |}
  288    |uint16 _040QM00600001NG71CCFSCAPBCTT0_getqTgtOut(struct _040QM00600001NG71CCFSCAPBCTT0_Obj *self)
  289    |{ 
  290    |   /* return with expr from getqTgtOut: min=0, max=12800, hex=128phys+0, limit=(maxBitLength: true, assign: true), zero incl.=true */
  291    |   return (self->qTgtOut->val);
  292    |}
  293    |/*-----------------------------------------------------------------------------
  294    | * END: Function definitions - Algorithms
  295    | ******************************************************************************/
  296    |
  297    |
  298    |/******************************************************************************
  299    | * BEGIN: Simulation instruction code
  300    | *----------------------------------------------------------------------------*/
  301    |
  302    |/*-----------------------------------------------------------------------------
  303    | *    Class initialization
  304    | *----------------------------------------------------------------------------*/
  305    |
  306    |void initClass__040QM00600001NG71CCFSCAPBCTT0 (_040QM00600001NG71CCFSCAPBCTT0_Class *_ASCET_class)
  307    |{ 
  308    |}
  309    |
  310    |/*-----------------------------------------------------------------------------
  311    | *    Functions for use with the L1 protocol
  312    | *----------------------------------------------------------------------------*/
  313    |
  314    |#pragma attol stop_analyze
  315    |uint8 *_L1__040QM00600001NG71CCFSCAPBCTT0_calc (ASDObject *self, uint8 *_ASCET_data)
  316    |{ 
  317    |   uint8  ModeChangeFlag;
  318    |   sint16  dp_in;
  319    |   uint16  qTgt;
  320    |   sint16  dp_K1;
  321    |   uint8  EV_OpMode_k1;
  322    |   uint8  B_Closepulse;
  323    |   asdSimPreCall (_ASCET_data);
  324    |   removeScalar (_ASCET_data, (uint8 *) &B_Closepulse, 1);
  325    |   removeScalar (_ASCET_data, (uint8 *) &EV_OpMode_k1, 1);
  326    |   removeScalar (_ASCET_data, (uint8 *) &dp_K1, 2);
  327    |   removeScalar (_ASCET_data, (uint8 *) &qTgt, 2);
  328    |   removeScalar (_ASCET_data, (uint8 *) &dp_in, 2);
  329    |   removeScalar (_ASCET_data, (uint8 *) &ModeChangeFlag, 1);
  330    |   
  331    |   _040QM00600001NG71CCFSCAPBCTT0_calc ((struct _040QM00600001NG71CCFSCAPBCTT0_Obj *)self, ModeChangeFlag, dp_in, qTgt, dp_K1, EV_OpMode_k1, B_Closepulse);
  332    |   asdSimPostCall (_ASCET_data);
  333    |   return (_ASCET_data);
  334    |}
  335    |/*no L1-method generated for getdp_tgt*/
  336    |/*no L1-method generated for getEV_OpMode*/
  337    |/*no L1-method generated for getqTgtOut*/
  338    |static MethodList _040QM00600001NG71CCFSCAPBCTT0_ObjectMethodList = 
  339    |{ 
  340    |   _L1__040QM00600001NG71CCFSCAPBCTT0_calc
  341    |};
  342    |static MethodList _040QM00600001NG71CCFSCAPBCTT0_ClassMethodList = 
  343    |{ 
  344    |   ((void *)0)
  345    |};
  346    |
  347    |/*-----------------------------------------------------------------------------
  348    | *    Global objects
  349    | *----------------------------------------------------------------------------*/
  350    |
  351    |static ASDClassHeader _040QM00600001NG71CCFSCAPBCTT0_ClassHeader = 
  352    |{ 
  353    |   1, 0, 14, 0, &_040QM00600001NG71CCFSCAPBCTT0_ObjectMethodList, &_040QM00600001NG71CCFSCAPBCTT0_ClassMethodList
  354    |};
  355    |_040QM00600001NG71CCFSCAPBCTT0_Class _040QM00600001NG71CCFSCAPBCTT0_ClassObj = {{1, {&_040QM00600001NG71CCFSCAPBCTT0_ClassHeader}, {0}}};
  356    |#pragma attol start_analyze
  357    |
  358    |/*-----------------------------------------------------------------------------
  359    | * END: Simulation instruction code
  360    | ******************************************************************************/
  361    |
  362    |
