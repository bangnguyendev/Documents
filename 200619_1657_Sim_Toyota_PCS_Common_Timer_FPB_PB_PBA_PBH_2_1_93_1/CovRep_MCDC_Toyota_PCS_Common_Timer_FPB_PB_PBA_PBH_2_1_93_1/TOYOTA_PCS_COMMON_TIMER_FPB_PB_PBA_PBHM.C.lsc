--------------------------------------------------------------------------------

	Rational(R) Test RealTime Coverage - Listing
	Tool version:             7.5.0.6.206.011

	File: TOYOTA_PCS_COMMON_TIMER_FPB_PB_PBA_PBHM.C (C:\TSDCT\ETAS\ASCET\V6_1_4\CGEN\)

	Source time:        Fri Jun 19 16:57:42 2020
	Listing time:       Fri Jun 19 16:58:51 2020
	(Preprocessing Flags:/nologo /errorReport:queue /Od /I C:\tsdct\ETAS\ASCET\V6_1_4\target\legacy\psl /I C:\tsdct\ETAS\ASCET\V6_1_4\target\legacy /I C:\tsdct\ETAS\ASCET\V6_1_4\target\common /I C:\tsdct\ETAS\ASCET\V6_1_4\target /I C:\tsdct\ETAS\ASCET\V6_1_4\target\psl /D STRICT /D SIM_PC /D WIN32 /D _DEBUG /D _WINDOWS /D _USRDLL /D VISUALSTDPRJ_EXPORTS /D _WINDLL /D _UNICODE /D UNICODE /Gm /EHsc /RTC1 /MTd /W3 /ZI /TC )

--------------------------------------------------------------------------------
(Following annotated lines were not hit ==>, or partially hit -->)
    1    |
    2    |/******************************************************************************
    3    | * BEGIN: Banner
    4    | *-----------------------------------------------------------------------------
    5    | *    Please do not edit! This file was automatically generated by ASCET.
    6    | *-----------------------------------------------------------------------------
    7    | *                                 ETAS GmbH
    8    | *                      D-70469 Stuttgart, Borsigstr. 14
    9    | *-----------------------------------------------------------------------------
   10    | * File:.....................Toyota_PCS_Common_Timer_FPB_PB_PBA_PBHM.c
   11    | * Description:.............."Toyota_PCS_Common_Timer_FPB_PB_PBA_PBH>>Impl (module code)"
   12    | * Creation Date:............6/19/2020
   13    | * Creation Time:............4:35:15 PM
   14    | *-----------------------------------------------------------------------------
   15    | * ASCET User:...............nbg7hc
   16    | * ASCET Version:............V6.1.4_CS_SR33
   17    | * ASCET-MD Version:.........V6.1.4
   18    | * ASCET-RP Version:.........V6.1.4
   19    | * ASCET-SE Version:.........V6.1.4 CID[610]
   20    | *-----------------------------------------------------------------------------
   21    | * END: Banner
   22    | ******************************************************************************/
   23    |
   24    |
   25    |/*-----------------------------------------------------------------------------
   26    | *    Include files
   27    | *----------------------------------------------------------------------------*/
   28    |
   29    |#include "globalH.h"
   30    |#include "_CSP_PCS_general_ParameterM.h"
   31    |#include "_CSP_PCS_general_ParameterI.h"
   32    |#include "Toyota_PCS_Common_Timer_FPB_PB_PBA_PBHM.h"
   33    |
   34    |
   35    |/******************************************************************************
   36    | * BEGIN: Generation Information
   37    | *-----------------------------------------------------------------------------
   38    | * Component:................Class
   39    | * Name:....................."Toyota_PCS_Common_Timer_FPB_PB_PBA_PBH"
   40    | * Implementation:..........."Impl"
   41    | * Dataset:.................."Data"
   42    | * Specification:............ESDL
   43    | * Version:.................."Version 2.1.93.1"
   44    | * Library Path:............."CSMosarASWMainstream93_TMC_PF19CMP_UHD_BL4.2_Bugfix_Release5\Customer\Toyota\Package\LDM\Toyota_CSP\Private"
   45    | *-----------------------------------------------------------------------------
   46    | * Project Name:............."CoverageTestProject"
   47    | * Project Library Path:....."CSMosarASWMainstream93_TMC_PF19CMP_UHD_BL4.2_Bugfix_Release5\_Temp_CoverageTestPrj\"
   48    | *-----------------------------------------------------------------------------
   49    | * Generation Date:..........6/19/2020
   50    | * Generation Time:..........16:35:14
   51    | *-----------------------------------------------------------------------------
   52    | * ASCET Version:............V6.1.4_CS_SR33
   53    | * ASCET-MD Version:.........V6.1.4
   54    | * ASCET-RP Version:.........V6.1.4
   55    | * ASCET-SE Version:.........V6.1.4 CID[610]
   56    | *-----------------------------------------------------------------------------
   57    | * END: Generation Information
   58    | ******************************************************************************/
   59    |
   60    |
   61    |/******************************************************************************
   62    | * BEGIN: Project Options "Build"/"Code"
   63    | *-----------------------------------------------------------------------------
   64    | *    Build
   65    | *-----------------------------------------------------------------------------
   66    | * Code Generator:...........Implementation Experiment
   67    | * Target:...................PC Simulation Library
   68    | *-----------------------------------------------------------------------------
   69    | *    Code
   70    | *-----------------------------------------------------------------------------
   71    | * Add Comment with Generation Information for each Component [true]: true
   72    | * Add Comment with Implementation Information for each Assignment Statement [true]: true
   73    | * Add Comment with Specification Source for each Statement [true]:..true
   74    | * Add parenthesis for readability [false]:..........................false
   75    | * Casting [MISRA]:..................................................MISRA
   76    | * Force Parenthesis for Binary Logical Operators [false]:...........false
   77    | * Generate Define Directives for Enum Values [false]:...............false
   78    | * Prefix for Component Names [<empty String>]:......................<empty String>
   79    | * Protected against division by zero [true]:........................true
   80    | * Protected Division against Signed Overflow [true]:................true
   81    | * Protected Vector Indices [true]:..................................true
   82    | *-----------------------------------------------------------------------------
   83    | *    Code.Compiler
   84    | *-----------------------------------------------------------------------------
   85    | * Division truncation direction [Zero (T-division)]:................Zero (T-division)
   86    | * Inline directive [__inline]:......................................__inline
   87    | * Integer Bit Size [32]:............................................32
   88    | * Private directive [static]:.......................................static
   89    | * Public directive [<empty String>]:................................<empty String>
   90    | *-----------------------------------------------------------------------------
   91    | *    Code.Experiment
   92    | *-----------------------------------------------------------------------------
   93    | * Activate Coverage Analysis [false]:...............................false
   94    | * Activate Measurement of Stack Variables and Operator Results [false]: false
   95    | * Activate Value Range Analysis [false]:............................false
   96    | * Add Comment with Specification Info for each Element [true]:......true
   97    | * Cache Locking [true]:.............................................false
   98    | * Coverage Counting Mode [boolean mode]:............................boolean mode
   99    | * Enable logging of all data changes [false]:.......................false
  100    | * Max Number of Loop Iterations [1000]:.............................0
  101    | * Message Usage Variant [NON_OPT_COPY_FUNCTION]:....................NON_OPT_COPY_FUNCTION
  102    | * Use OID for Generation of Component Names [true]:.................true
  103    | *-----------------------------------------------------------------------------
  104    | *    Code.FixedPoint
  105    | *-----------------------------------------------------------------------------
  106    | * Allow Double bit Size for Division Numerators [true]:.............true
  107    | * Allow Limit Service for Assignment Limitation [true]:.............true
  108    | * Arithmetic Service Set [<None>]:..................................<None>
  109    | * Generate Limiters (may be changed locally) [true]:................true
  110    | * Generate Round Operation on float to integer Assignment [true]:...true
  111    | * Maximum bit Length (float) [64]:..................................64
  112    | * Maximum bit Length (int) [32]:....................................32
  113    | * Result on Division by Zero [numerator]:...........................numerator
  114    | * Temp Vars always 32 bit (integer) [false]:........................false
  115    | * Use power of 2 approximations of literals [false]:................false
  116    | * Use SHIFT Operation on Signed Values instead of DIV Operation [true]: true
  117    | * Use SHIFT Operation on Signed Values instead of MUL Operation [true]: true
  118    | *-----------------------------------------------------------------------------
  119    | *    Code.Optimizations
  120    | *-----------------------------------------------------------------------------
  121    | * Auto-inline private methods (Smaller code-size - may be changed locally) [false]: false
  122    | * Generate well-formed switch [false]:..............................false
  123    | * Hierarchical Code-Generation (may be changed locally) [false]:....false
  124    | * Initialise history variable with zero [false]:....................false
  125    | * Optimize Direct Access Methods (Multiple Levels) [false]:.........false
  126    | * Optimize Direct Access Methods (One Level) [false]:...............false
  127    | * Optimize Static Actions (Restricted Modelling) [false]:...........false
  128    | * Outline Generated Methods (may be changed locally) [false]:.......false
  129    | *-----------------------------------------------------------------------------
  130    | *    Station.Build
  131    | *-----------------------------------------------------------------------------
  132    | * Use Customized Data Type Names [false]:...........................false
  133    | *-----------------------------------------------------------------------------
  134    | * END: Project Options "Build"/"Code"
  135    | ******************************************************************************/
  136    |
  137    |
  138    |/******************************************************************************
  139    | * BEGIN: Local symbolic constants and function declarations
  140    | *----------------------------------------------------------------------------*/
  141    |
  142    |/*-----------------------------------------------------------------------------
  143    | *    Defines
  144    | *----------------------------------------------------------------------------*/
  145    |
  146    |#define _ASCET_INTERPOLATE_ROUNDED INTERPOLATE_ROUNDED
  147    |#define _ASCET_INTERPOLATE_LINEAR INTERPOLATE_LINEAR
  148    |
  149    |
  150    |/*-----------------------------------------------------------------------------
  151    | * END: Local symbolic constants and function declarations
  152    | ******************************************************************************/
  153    |
  154    |
  155    |/******************************************************************************
  156    | * BEGIN: Function definitions - Algorithms
  157    | *----------------------------------------------------------------------------*/
  158    |
  159    |/* public calc (AEBRequest_PCS::log;PCS_Testmode_Active::log;PBA_Active::log;FPB_Active::log;PB_Active::log;PBH_Active::log;LDMSelectedController::LDMSelectedController;CycleTime::cont) */
  160    |void _040QM00600001NG708CJPS9C6F14M_calc(struct _040QM00600001NG708CJPS9C6F14M_Obj *self, 
  161    |   uint8 AEBRequest_PCS, 
  162    |   uint8 PCS_Testmode_Active, 
  163    |   uint8 PBA_Active, 
  164    |   uint8 FPB_Active, 
  165    |   uint8 PB_Active, 
  166    |   uint8 PBH_Active, 
  167    |   uint8 LDMSelectedController, 
  168    |   uint8 CycleTime)
  169    |{ 
  170    |   uint16 _t1uint16;
  171    |   /* calc: line #8 */
  172    |   if (AEBRequest_PCS &&
  173 -->|      !(PCS_Testmode_Active &&
***** Modified condition "PCS_Testmode_Active" #2 (TFXXXXT=T/TTFFFFX=F) *****
  174 -->|      !PBA_Active &&
***** Basic condition "PBA_Active" False *****
***** Modified condition "PBA_Active" #3 (TTTXXXT=T/TTFFFFX=F) *****
  175 ==>|      !FPB_Active &&
***** Basic condition "FPB_Active" True *****
***** Basic condition "FPB_Active" False *****
***** Modified condition "FPB_Active" #4 (TTFTXXT=T/TTFFFFX=F) *****
  176 ==>|      !PB_Active &&
***** Basic condition "PB_Active" True *****
***** Basic condition "PB_Active" False *****
***** Modified condition "PB_Active" #5 (TTFFTXT=T/TTFFFFX=F) *****
  177 ==>|      !PBH_Active) &&
***** Basic condition "PBH_Active" True *****
***** Basic condition "PBH_Active" False *****
***** Modified condition "PBH_Active" #6 (TTFFFTT=T/TTFFFFX=F) *****
  178 -->|      LDMSelectedController == 16)
***** Modified condition "LDMSelectedController == 16" #7 (TTFFFTT=T/TTFFFTF=F), (TTFFTXT=T/TTFFTXF=F), (TTFTXXT=T/TTFTXXF=F), (TTTXXXT=T/TTTXXXF=F), (TFXXXXT=T/TFXXXXF=F) *****
***** Compound condition TTFFFTT=T *****
***** Compound condition TTFFTXT=T *****
***** Compound condition TTFTXXT=T *****
***** Compound condition TTTXXXT=T *****
***** Compound condition TTFFFTF=F *****
***** Compound condition TTFFTXF=F *****
***** Compound condition TTFTXXF=F *****
***** Compound condition TFXXXXF=F *****
***** Compound condition TTFFFFX=F *****
  179    |   { 
  180    |      /* calc: line #11 */
  181    |      if (self->t_PBA_FPB_PB_PBH_Operation->val < self->C_t_PBA_FPB_PB_PBH_Operation_Max->val)
  182    |      { 
  183    |         /* calc: line #13 */
  184    |         _t1uint16 = self->t_PBA_FPB_PB_PBH_Operation->val + CycleTime;
  185    |         /* assignment to t_PBA_FPB_PB_PBH_Operation: min=0, max=64000, hex=200phys+0, limit=(maxBitLength: true, assign: true), zero incl.=true */
  186 -->|         self->t_PBA_FPB_PB_PBH_Operation->val = (_t1uint16 <= 64000U) ? _t1uint16 : 64000U;
***** Simple block /then/then/?:F *****
***** Basic condition "_t1uint16 <= 64000U" False *****
  187    |      }
  188    |      else 
  189    |      { 
  190    |         /* calc: line #17 */
  191    |         /* assignment to t_PBA_FPB_PB_PBH_Operation: min=0, max=64000, hex=200phys+0, limit=(maxBitLength: true, assign: true), zero incl.=true */
  192    |         self->t_PBA_FPB_PB_PBH_Operation->val = self->C_t_PBA_FPB_PB_PBH_Operation_Max->val;
  193    |      }
  194    |   }
  195    |   else 
  196    |   { 
  197    |      /* calc: line #22 */
  198    |      /* assignment to t_PBA_FPB_PB_PBH_Operation: min=0, max=64000, hex=200phys+0, limit=(maxBitLength: true, assign: true), zero incl.=true */
  199    |      self->t_PBA_FPB_PB_PBH_Operation->val = 0U;
  200    |   }
  201    |}
  202    |/* public Init () */
  203    |void _040QM00600001NG708CJPS9C6F14M_Init(struct _040QM00600001NG708CJPS9C6F14M_Obj *self)
  204    |{ 
  205    |   /* Init: line #1 */
  206    |   /* assignment to t_PBA_FPB_PB_PBH_Operation: min=0, max=64000, hex=200phys+0, limit=(maxBitLength: true, assign: true), zero incl.=true */
  207    |   self->t_PBA_FPB_PB_PBH_Operation->val = 0U;
  208    |}
  209    |/* public t_PBA_FPB_PB_PBH_Operation () return::cont */
  210    |uint16 _040QM00600001NG708CJPS9C6F14M_t_PBA_FPB_PB_PBH_Operation(struct _040QM00600001NG708CJPS9C6F14M_Obj *self)
  211    |{ 
  212    |   /* t_PBA_FPB_PB_PBH_Operation: line #1 */
  213    |   /* return with expr from t_PBA_FPB_PB_PBH_Operation: min=0, max=64000, hex=200phys+0, limit=(maxBitLength: true, assign: false), zero incl.=true */
  214    |   return (self->t_PBA_FPB_PB_PBH_Operation->val);
  215    |}
  216    |/*-----------------------------------------------------------------------------
  217    | * END: Function definitions - Algorithms
  218    | ******************************************************************************/
  219    |
  220    |
  221    |/******************************************************************************
  222    | * BEGIN: Simulation instruction code
  223    | *----------------------------------------------------------------------------*/
  224    |
  225    |/*-----------------------------------------------------------------------------
  226    | *    Class initialization
  227    | *----------------------------------------------------------------------------*/
  228    |
  229    |void initClass__040QM00600001NG708CJPS9C6F14M (_040QM00600001NG708CJPS9C6F14M_Class *_ASCET_class)
  230    |{ 
  231    |}
  232    |
  233    |/*-----------------------------------------------------------------------------
  234    | *    Functions for use with the L1 protocol
  235    | *----------------------------------------------------------------------------*/
  236    |
  237    |#pragma attol stop_analyze
  238    |uint8 *_L1__040QM00600001NG708CJPS9C6F14M_calc (ASDObject *self, uint8 *_ASCET_data)
  239    |{ 
  240    |   uint8  AEBRequest_PCS;
  241    |   uint8  PCS_Testmode_Active;
  242    |   uint8  PBA_Active;
  243    |   uint8  FPB_Active;
  244    |   uint8  PB_Active;
  245    |   uint8  PBH_Active;
  246    |   uint8  LDMSelectedController;
  247    |   uint8  CycleTime;
  248    |   asdSimPreCall (_ASCET_data);
  249    |   removeScalar (_ASCET_data, (uint8 *) &CycleTime, 1);
  250    |   removeScalar (_ASCET_data, (uint8 *) &LDMSelectedController, 1);
  251    |   removeScalar (_ASCET_data, (uint8 *) &PBH_Active, 1);
  252    |   removeScalar (_ASCET_data, (uint8 *) &PB_Active, 1);
  253    |   removeScalar (_ASCET_data, (uint8 *) &FPB_Active, 1);
  254    |   removeScalar (_ASCET_data, (uint8 *) &PBA_Active, 1);
  255    |   removeScalar (_ASCET_data, (uint8 *) &PCS_Testmode_Active, 1);
  256    |   removeScalar (_ASCET_data, (uint8 *) &AEBRequest_PCS, 1);
  257    |   
  258    |   _040QM00600001NG708CJPS9C6F14M_calc ((struct _040QM00600001NG708CJPS9C6F14M_Obj *)self, AEBRequest_PCS, PCS_Testmode_Active, PBA_Active, FPB_Active, PB_Active, PBH_Active, LDMSelectedController, CycleTime);
  259    |   asdSimPostCall (_ASCET_data);
  260    |   return (_ASCET_data);
  261    |}
  262    |uint8 *_L1__040QM00600001NG708CJPS9C6F14M_Init (ASDObject *self, uint8 *_ASCET_data)
  263    |{ 
  264    |   asdSimPreCall (_ASCET_data);
  265    |   
  266    |   _040QM00600001NG708CJPS9C6F14M_Init ((struct _040QM00600001NG708CJPS9C6F14M_Obj *)self);
  267    |   asdSimPostCall (_ASCET_data);
  268    |   return (_ASCET_data);
  269    |}
  270    |uint8 *_L1__040QM00600001NG708CJPS9C6F14M_t_PBA_FPB_PB_PBH_Operation (ASDObject *self, uint8 *_ASCET_data)
  271    |{ 
  272    |   uint16  _return;
  273    |   asdSimPreCall (_ASCET_data);
  274    |   _return = 
  275    |   _040QM00600001NG708CJPS9C6F14M_t_PBA_FPB_PB_PBH_Operation ((struct _040QM00600001NG708CJPS9C6F14M_Obj *)self);
  276    |   asdSimPostCall (_ASCET_data);
  277    |   addScalar (_ASCET_data, (uint8 *) &_return, 2);
  278    |   return (_ASCET_data);
  279    |}
  280    |static MethodList _040QM00600001NG708CJPS9C6F14M_ObjectMethodList = 
  281    |{ 
  282    |   _L1__040QM00600001NG708CJPS9C6F14M_calc, 
  283    |   _L1__040QM00600001NG708CJPS9C6F14M_t_PBA_FPB_PB_PBH_Operation, 
  284    |   _L1__040QM00600001NG708CJPS9C6F14M_Init
  285    |};
  286    |static MethodList _040QM00600001NG708CJPS9C6F14M_ClassMethodList = 
  287    |{ 
  288    |   ((void *)0)
  289    |};
  290    |
  291    |/*-----------------------------------------------------------------------------
  292    | *    Global objects
  293    | *----------------------------------------------------------------------------*/
  294    |
  295    |static ASDClassHeader _040QM00600001NG708CJPS9C6F14M_ClassHeader = 
  296    |{ 
  297    |   3, 0, 2, 0, &_040QM00600001NG708CJPS9C6F14M_ObjectMethodList, &_040QM00600001NG708CJPS9C6F14M_ClassMethodList
  298    |};
  299    |_040QM00600001NG708CJPS9C6F14M_Class _040QM00600001NG708CJPS9C6F14M_ClassObj = {{1, {&_040QM00600001NG708CJPS9C6F14M_ClassHeader}, {0}}};
  300    |#pragma attol start_analyze
  301    |
  302    |/*-----------------------------------------------------------------------------
  303    | * END: Simulation instruction code
  304    | ******************************************************************************/
  305    |
  306    |
